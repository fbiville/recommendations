const { makeAugmentedSchema, inferSchema } = require("neo4j-graphql-js");
const { ApolloServer } = require("apollo-server");
const neo4j = require("neo4j-driver");

const main = async () => {
  // Create Neo4j driver instance
  const driver = neo4j.driver(
    "bolt://<HOST>:<BOLTPORT>",
    neo4j.auth.basic("<USERNAME>", "<PASSWORD>")
  );

  const typeDefs = /* GraphQL */ `
type Movie {
  budget: Int
  countries: [String]
  imdbId: ID
  imdbRating: Float
  imdbVotes: Int
  languages: [String]
  movieId: ID!
  plot: String
  poster: String
  released: String
  revenue: Int
  runtime: Int
  title: String
  tmdbId: String
  url: String
  year: Int
  genres: [Genre] @relationship(type: "IN_GENRE", direction: "OUT")
  actors: [Actor] @relationship(type: "ACTED_IN", direction: "IN")
  directors: [Director] @relationship(type: "DIRECTED", direction: "IN")
  similar(first: Int = 3): [Movie]
    @cypher(
      statement: """
      MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)
      WITH rec, COUNT(*) AS score
      RETURN rec ORDER BY score DESC LIMIT $first
      """
    )
}

type Genre {
  name: String
  movies: [Movie] @relationship(type: "IN_GENRE", direction: "IN")
}

type User {
  userId: ID!
  name: String
  rated: [Movie] @relationship(type: "RATED", direction: "OUT")
}

type Actor {
  bio: String
  born: Date
  bornIn: String
  died: Date
  imdbIb: String
  name: String
  poster: String
  tmdbId: String
  url: String
  acted_in: [Movie] @relationship(type: "ACTED_IN", direction: "OUT")
}

type Director {
  bio: String
  born: Date
  bornIn: String
  died: Date
  imdbIb: String
  name: String
  poster: String
  tmdbId: String
  url: String
  directed: [Movie] @relationship(type: "DIRECTED", direction: "OUT")
}

`;  // GraphQL type definitions can be inferred from existing database or
  // specified explicitly. Uncomment the lines below to specify typedefs explicitly
  // otherwise typedefs will be inferred from existing database
  //typeDefs = /* GraphQL */ `
  //type Person {
  //  name: String
  //  knows: [Person] @relation(name: "KNOWS", direction: "OUT")
  //  friendCount: Int @cypher(statement:"RETURN SIZE( (this)-[:KNOWS]->(:Person))")
  //}
  //`;

  const getInferredTypes = async (driver) => {
    const schemaInferenceOptions = {
      alwaysIncludeRelationships: false,
    };

    const results = await inferSchema(driver, schemaInferenceOptions);
    return results.typeDefs;
  };

  if (!typeDefs) {
    typeDefs = await getInferredTypes(driver);
  }

  // Create executable GraphQL schema from GraphQL type definitions,
  // using neo4j-graphql.js to autogenerate resolvers
  const schema = makeAugmentedSchema({
    typeDefs,
  });

  // Create ApolloServer instance to serve GraphQL schema
  // Inject Neo4j driver instance into the context object
  //  which is passed into each (autogenerated) resolver
  const server = new ApolloServer({
    context: { driver },
    schema,
  });

  // Start ApolloServer
  server.listen().then(({ url }) => {
    console.log(`GraphQL server ready at ${url}`);
  });
};

main();